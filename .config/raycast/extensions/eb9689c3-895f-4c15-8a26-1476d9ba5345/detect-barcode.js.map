{
  "version": 3,
  "sources": ["../src/detect-barcode.tsx", "swift:/Users/runner/work/extensions/extensions/extensions/screenocr/swift", "../src/hooks.ts", "../src/utils.ts"],
  "sourcesContent": ["import { Clipboard, closeMainWindow, showToast, Toast } from \"@raycast/api\";\nimport { detectBarcode } from \"./utils\";\n\nexport default async function command() {\n  await closeMainWindow();\n\n  try {\n    const detectedCodes = await detectBarcode();\n\n    if (\n      !detectedCodes ||\n      detectedCodes === \"No barcodes or QR codes detected\"\n    ) {\n      return await showToast({\n        style: Toast.Style.Failure,\n        title: \"No barcodes or QR codes detected\",\n      });\n    }\n\n    await Clipboard.copy(detectedCodes);\n    await showToast({\n      style: Toast.Style.Success,\n      title: \"Copied barcode/QR code to clipboard\",\n    });\n  } catch (e) {\n    console.error(e);\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Failed detecting barcode/QR code\",\n    });\n  }\n}\n", "\nimport { environment } from \"@raycast/api\";\nimport { join } from \"path\";\nimport { chmod } from \"fs/promises\";\nimport { spawn } from \"child_process\";\n\nasync function runSwiftFunction(command, ...args) {\n  const swiftPath = join(environment.assetsPath, \"compiled_raycast_swift/swift\");\n  await chmod(swiftPath, \"755\");\n\n  return new Promise((resolve, reject) => {\n    const commandArgs = [command];\n    for (const arg of args) {\n      try {\n        commandArgs.push(JSON.stringify(arg, (k, v) => v === undefined ? null : v));\n      } catch (err) {\n        reject(new SwiftError(\"Failed to serialize input to JSON: \" + err.message));\n        return;\n      }\n    }\n    const child = spawn(swiftPath, commandArgs);\n    const stdout = [];\n    const stderr = [];\n\n    child.stdout?.on(\"data\", (data) => {\n      stdout.push(data.toString());\n    });\n    child.stderr?.on(\"data\", (data) => {\n      stderr.push(data.toString());\n    });\n\n    child.on(\"exit\", (code) => {\n      if (code === 0) {\n        try {\n          const result = stdout.join(\"\").trim();\n          if (result.length != 0) {\n            resolve(JSON.parse(result));\n          } else {\n            resolve(null);\n          }\n        } catch (err) {\n          const error = new SwiftError(\"Failed to deserialize result from JSON: \" + err.message);\n          error.stdout = stdout.join(\"\").trim();\n          error.stderr = stderr.join(\"\").trim();\n          reject(error);\n        }\n      } else {\n        const error = new SwiftError(stderr.join(\"\").trim() || stdout.join(\"\").trim() || \"Could not get any data\");\n        error.stdout = stdout.join(\"\").trim();\n        error.stderr = stderr.join(\"\").trim();\n        reject(error);\n      }\n    });\n\n    child.on(\"error\", (error) => {\n      reject(error);\n    });\n  });\n}\n\nexport async function recognizeText(fullscreen, keepImage, fast, languageCorrection, ignoreLineBreaks, customWordsList, languages) {\n  return await runSwiftFunction(\"recognizeText\", fullscreen, keepImage, fast, languageCorrection, ignoreLineBreaks, customWordsList, languages)\n}\n\nexport async function detectBarcode(keepImage) {\n  return await runSwiftFunction(\"detectBarcode\", keepImage)\n}\n\nexport class SwiftError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"SwiftError\";\n  }\n}\n", "import { LocalStorage, getPreferenceValues } from \"@raycast/api\";\nimport supportedLanguages from \"./data/supportedLanguages\";\nimport { Language, Preferences } from \"./types\";\n\nexport const usePreferences = () => {\n  return getPreferenceValues<Preferences>();\n};\n\nexport const getUserSelectedLanguages = async () => {\n  const preference = usePreferences();\n\n  const selectedLanguages = await LocalStorage.getItem(\"SelectedLanguages\");\n\n  const primaryLanguage = {\n    title:\n      supportedLanguages.find(\n        (lang) => lang.value === preference.primaryLanguage,\n      )?.title ?? \"\uD83C\uDDFA\uD83C\uDDF8 English (US)\",\n    value: preference.primaryLanguage,\n    isDefault: true,\n  } as Language;\n\n  let userSelectedLanguages: Language[] = [];\n\n  if (typeof selectedLanguages !== \"undefined\") {\n    const selectedLanguagesParsed = JSON.parse(\n      selectedLanguages as unknown as string,\n    ) as Language[];\n    userSelectedLanguages = selectedLanguagesParsed;\n    return userSelectedLanguages;\n  }\n\n  const languages: Language[] = [primaryLanguage];\n  return languages;\n};\n", "import {\n  recognizeText as recognizeTextSwift,\n  detectBarcode as detectBarcodeSwift,\n} from \"swift:../swift\";\nimport { getUserSelectedLanguages, usePreferences } from \"./hooks\";\n\nexport const recognizeText = async (isFullScreen = false) => {\n  const preference = usePreferences();\n\n  try {\n    const languages = await getUserSelectedLanguages();\n\n    const recognizedText = await recognizeTextSwift(\n      isFullScreen,\n      preference.keepImage,\n      preference.ocrMode === \"fast\",\n      preference.languageCorrection,\n      preference.ignoreLineBreaks,\n      preference.customWordsList ? preference.customWordsList.split(\",\") : [],\n      languages.map((lang) => lang.value),\n    );\n\n    return recognizedText;\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Failed to recognize text\");\n  }\n};\n\nexport const detectBarcode = async () => {\n  const preference = usePreferences();\n\n  try {\n    const detectedCodes = await detectBarcodeSwift(preference.keepImage);\n\n    return detectedCodes;\n  } catch (error) {\n    console.error(error);\n    throw new Error(\"Failed to detect barcode\");\n  }\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA6D,wBCC7D,IAAAC,EAA4B,wBAC5BC,EAAqB,gBACrBC,EAAsB,uBACtBC,EAAsB,yBAEtB,eAAeC,EAAiBC,KAAYC,EAAM,CAChD,IAAMC,KAAY,QAAK,cAAY,WAAY,8BAA8B,EAC7E,eAAM,SAAMA,EAAW,KAAK,EAErB,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,IAAMC,EAAc,CAACL,CAAO,EAC5B,QAAWM,KAAOL,EAChB,GAAI,CACFI,EAAY,KAAK,KAAK,UAAUC,EAAK,CAACC,EAAGC,IAAMA,IAAM,OAAY,KAAOA,CAAC,CAAC,CAC5E,OAASC,EAAK,CACZL,EAAO,IAAIM,EAAW,sCAAwCD,EAAI,OAAO,CAAC,EAC1E,MACF,CAEF,IAAME,KAAQ,SAAMT,EAAWG,CAAW,EACpCO,EAAS,CAAC,EACVC,EAAS,CAAC,EAEhBF,EAAM,QAAQ,GAAG,OAASG,GAAS,CACjCF,EAAO,KAAKE,EAAK,SAAS,CAAC,CAC7B,CAAC,EACDH,EAAM,QAAQ,GAAG,OAASG,GAAS,CACjCD,EAAO,KAAKC,EAAK,SAAS,CAAC,CAC7B,CAAC,EAEDH,EAAM,GAAG,OAASI,GAAS,CACzB,GAAIA,IAAS,EACX,GAAI,CACF,IAAMC,EAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EAChCI,EAAO,QAAU,EACnBb,EAAQ,KAAK,MAAMa,CAAM,CAAC,EAE1Bb,EAAQ,IAAI,CAEhB,OAASM,EAAK,CACZ,IAAMQ,EAAQ,IAAIP,EAAW,2CAA6CD,EAAI,OAAO,EACrFQ,EAAM,OAASL,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCK,EAAM,OAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCT,EAAOa,CAAK,CACd,KACK,CACL,IAAMA,EAAQ,IAAIP,EAAWG,EAAO,KAAK,EAAE,EAAE,KAAK,GAAKD,EAAO,KAAK,EAAE,EAAE,KAAK,GAAK,wBAAwB,EACzGK,EAAM,OAASL,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCK,EAAM,OAASJ,EAAO,KAAK,EAAE,EAAE,KAAK,EACpCT,EAAOa,CAAK,CACd,CACF,CAAC,EAEDN,EAAM,GAAG,QAAUM,GAAU,CAC3Bb,EAAOa,CAAK,CACd,CAAC,CACH,CAAC,CACH,CAMA,eAAsBC,EAAcC,EAAW,CAC7C,OAAO,MAAMC,EAAiB,gBAAiBD,CAAS,CAC1D,CAEO,IAAME,EAAN,cAAyB,KAAM,CACpC,YAAYC,EAAS,CACnB,MAAMA,CAAO,EACb,KAAK,KAAO,YACd,CACF,ECzEA,IAAAC,EAAkD,wBAI3C,IAAMC,EAAiB,OACrB,uBAAiC,ECwBnC,IAAMC,EAAgB,SAAY,CACvC,IAAMC,EAAaC,EAAe,EAElC,GAAI,CAGF,OAFsB,MAAMF,EAAmBC,EAAW,SAAS,CAGrE,OAASE,EAAO,CACd,cAAQ,MAAMA,CAAK,EACb,IAAI,MAAM,0BAA0B,CAC5C,CACF,EHrCA,eAAOC,GAAiC,CACtC,QAAM,mBAAgB,EAEtB,GAAI,CACF,IAAMC,EAAgB,MAAMC,EAAc,EAE1C,GACE,CAACD,GACDA,IAAkB,mCAElB,OAAO,QAAM,aAAU,CACrB,MAAO,QAAM,MAAM,QACnB,MAAO,kCACT,CAAC,EAGH,MAAM,YAAU,KAAKA,CAAa,EAClC,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,qCACT,CAAC,CACH,OAAS,EAAG,CACV,QAAQ,MAAM,CAAC,EACf,QAAM,aAAU,CACd,MAAO,QAAM,MAAM,QACnB,MAAO,kCACT,CAAC,CACH,CACF",
  "names": ["detect_barcode_exports", "__export", "command", "__toCommonJS", "import_api", "import_api", "import_path", "import_promises", "import_child_process", "runSwiftFunction", "command", "args", "swiftPath", "resolve", "reject", "commandArgs", "arg", "k", "v", "err", "SwiftError", "child", "stdout", "stderr", "data", "code", "result", "error", "detectBarcode", "keepImage", "runSwiftFunction", "SwiftError", "message", "import_api", "usePreferences", "detectBarcode", "preference", "usePreferences", "error", "command", "detectedCodes", "detectBarcode"]
}
